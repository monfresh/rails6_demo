# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  build:
    docker:
      # Specify the Ruby version you desire here
      - image: circleci/ruby:2.6.5-node-browsers
        environment:
          RAILS_ENV: test
          PGHOST: localhost
          PGUSER: rails6_demo
          COVERAGE: true
          CC_TEST_REPORTER_ID: c382ee85283841cf905b93d6b30462024ab07be78a56157770e644a92144605d

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:11.4-alpine
        environment:
          POSTGRES_USER: rails6_demo
          POSTGRES_DB: rails_demo_test
          POSTGRES_PASSWORD: ""

    working_directory: ~/rails6_demo

    steps:
      - checkout

      - restore-cache:
          keys:
            - v1-rails6_demo-bundle-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install dependencies
          command: |
            gem install bundler:2.0.2
            bundle check || bundle install --deployment --jobs=4 --retry=3 --without deploy development doc production --path vendor/bundle

      - run:
          name: Install Code Climate Test Reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter

      - save-cache:
          key: v1-rails6_demo-bundle-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - restore-cache:
          keys:
            - v1-rails6_demo-yarn-{{ checksum "yarn.lock" }}
            - v1-rails6_demo-yarn-
      - run:
          name: Install Yarn
          command: yarn install --ignore-engines --cache-folder ~/.cache/yarn
      - save-cache:
          key: v1-rails6_demo-yarn-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Test Setup
          command: |
            cp config/application.yml.default config/application.yml
            bundle exec rake db:setup --trace
            bundle exec rake assets:precompile

      - run:
          name: Run Tests
          command: |
            mkdir /tmp/test-results
            ./cc-test-reporter before-build
            bundle exec rspec --format progress

      - run:
          name: Upload Test Results to Code Climate
          command: |
            ./cc-test-reporter format-coverage -t simplecov $CIRCLE_ARTIFACTS/coverage/.resultset.json
            ./cc-test-reporter upload-coverage

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
